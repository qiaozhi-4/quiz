<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quiz.mapper.PaperMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.quiz.entity.Paper">
        <id column="paper_id" property="paperId" />
        <result column="creator_user_id" property="creatorUserId" />
        <result column="order_" property="order" />
        <result column="state" property="state" />
        <result column="cover_url" property="coverUrl" />
        <result column="title" property="title" />
        <result column="describe_" property="describe" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
    </resultMap>

    <!-- Dto查询映射结果 -->
    <resultMap id="PaperDtoResultMap" extends="BaseResultMap" type="com.quiz.dto.PaperDTO">
        <collection property="questions" autoMapping="true" ofType="com.quiz.dto.QuestionDTO">
            <result column="question_title" property="title"/>
        </collection>
    </resultMap>

    <!-- Dto查询映射结果 -->
    <resultMap id="PaperAndAnswerDTOResultMap" extends="BaseResultMap" type="com.quiz.dto.PaperAndAnswerDTO">
        <collection property="questions" autoMapping="true" ofType="com.quiz.dto.QuestionDTO">
            <result column="question_title" property="title"/>
        </collection>
    </resultMap>

    <select id="selectPaperByPaperId" resultMap="PaperAndAnswerDTOResultMap" parameterType="java.lang.Integer">
        select qp.*,

               tu.nickname       as creator_user_nickname,
               tu.avatar_url     as creator_user_avatar_url,

               qq.*,
               qq.title          as question_title,
               qc.sub_class_name as class_name,

               qpq.*
        from quiz.q_paper qp
                 left join quiz.t_user tu on tu.user_id = qp.creator_user_id

                 left join quiz.q_paper_questions qpq on qp.paper_id = qpq.paper_id
                 left join quiz.q_question qq on qpq.question_id = qq.question_id
                 left join quiz.q_classes qc on qq.class_id = qc.sub_class_id and qc.class_id = 1
        where qp.paper_id = #{paperId}
          and qp.state != -1
        order by qpq.pq_id
    </select>
    <select id="selectPaperListByUserId" resultMap="PaperAndAnswerDTOResultMap">
        select qp.*,
               count(distinct qa.responder_user_id) as answer_total,

               tu.nickname                          as creator_user_nickname,
               tu.avatar_url                        as creator_user_avatar_url,

               qq.*,
               qq.title                             as question_title,
               qc.sub_class_name                    as class_name,

               qpq.*
        from quiz.q_paper qp
                 left join quiz.t_user tu on tu.user_id = qp.creator_user_id

                 left join quiz.q_answer qa on qp.paper_id = qa.paper_id

                 left join quiz.q_paper_questions qpq on qp.paper_id = qpq.paper_id
                 left join quiz.q_question qq on qpq.question_id = qq.question_id
                 left join quiz.q_classes qc on qq.class_id = qc.sub_class_id and qc.class_id = 1
        where qp.state != -1
          and qp.creator_user_id = #{userId}
        group by qp.paper_id, qq.question_id, qc.id, qpq.pq_id
    </select>
    <select id="selectPaperAndAnswerDTO" resultMap="PaperAndAnswerDTOResultMap">
        select qp.*,

               tu_qp.nickname    as creator_user_nickname,
               tu_qp.avatar_url  as creator_user_avatar_url,

               qa.score,

               tu_qa.nickname    as responder_user_nickname,
               tu_qa.avatar_url  as responder_user_avatar_url,

               qq.*,
               qq.title          as question_title,
               qc.sub_class_name as class_name,

               qpq.*,
               qaq.*
        from quiz.q_paper qp
                 left join quiz.t_user tu_qp on tu_qp.user_id = qp.creator_user_id

                 left join quiz.q_answer qa on qp.paper_id = qa.paper_id and qa.responder_user_id = #{responderUserId}
                 left join quiz.t_user tu_qa on tu_qa.user_id = qa.responder_user_id

                 left join quiz.q_paper_questions qpq on qp.paper_id = qpq.paper_id
                 left join quiz.q_question qq on qpq.question_id = qq.question_id
                 left join quiz.q_classes qc on qq.class_id = qc.sub_class_id and qc.class_id = 1

                 left join quiz.q_answer_questions qaq
                           on qa.answer_id = qaq.answer_id and qaq.question_id = qq.question_id
        where qp.paper_id = #{paperId}
        group by qp.paper_id, qa.answer_id, qq.question_id, qc.id, qpq.pq_id, qaq.aq_id
    </select>
    <select id="selectPaperAndAnswerDTOList" resultMap="PaperAndAnswerDTOResultMap">
        select qp.*,

               tu_qp.nickname    as creator_user_nickname,
               tu_qp.avatar_url  as creator_user_avatar_url,

               qa.score,

               tu_qa.nickname    as responder_user_nickname,
               tu_qa.avatar_url  as responder_user_avatar_url,

               qq.*,
               qq.title          as question_title,
               qc.sub_class_name as class_name,

               qpq.*,
               qaq.*
        from quiz.q_paper qp
                 left join quiz.t_user tu_qp on tu_qp.user_id = qp.creator_user_id

                 left join quiz.q_answer qa on qp.paper_id = qa.paper_id and qa.responder_user_id = #{responderUserId}
                 left join quiz.t_user tu_qa on tu_qa.user_id = qa.responder_user_id

                 left join quiz.q_paper_questions qpq on qp.paper_id = qpq.paper_id
                 left join quiz.q_question qq on qpq.question_id = qq.question_id
                 left join quiz.q_classes qc on qq.class_id = qc.sub_class_id and qc.class_id = 1

                 left join quiz.q_answer_questions qaq
                           on qa.answer_id = qaq.answer_id and qaq.question_id = qq.question_id
        where qp.state != -1
          and qp.creator_user_id = #{creatorUserId}
        group by qp.paper_id, qa.answer_id, qq.question_id, qc.id, qpq.pq_id, qaq.aq_id
    </select>

</mapper>
